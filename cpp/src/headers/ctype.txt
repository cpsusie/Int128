namespace ctype
	{
		
		
		template<utf_char Char>
		class cjm_ctype final : public std::ctype<Char>
		{
		public:
			cjm_ctype() : std::ctype(nullptr, false, 0) {}

		protected:
			
			Char do_widen(char byte) const override { return static_cast<Char>(byte); }
			const char* do_widen(const char* first, const char* last, Char* dst) const override
			{
				size_t idx = 0;
				for (auto it = first; it != last; ++it)
				{
					dst[idx++] = do_widen(*it);
				}
				return last;
			}
			char do_narrow(Char ch, char dflt) const override
			{
				return (ch >= std::numeric_limits<char>::min() && ch <= std::numeric_limits<char>::max()) ?
					static_cast<char>(ch) : dflt;
				
			}
			const Char* do_narrow(const Char* first, const Char* last, char dflt, char* dst) const override
			{
				size_t idx = 0;
				for (auto it = first; it != last; ++it)
				{
					dst[idx++] = do_narrow(*it, dflt);
				}
				return last;
			}			
		};
	}
